// generated by scripts/generateChainClients.js
export class NormalPlanetController {
  constructor(private chain: import("../../loom").Loom) {}

  getPlanets = (
    account: string
  ): Promise<{
    confirmedGold: string
    goldConfirmedAt: string
    ids: Array<string>
    ranks: Array<string>
    times: Array<string>
    coordinates: Array<string>
  }> => {
    return new this.chain.web3.eth.Contract(
      [
        {
          constant: true,
          inputs: [{ internalType: "address", name: "account", type: "address" }],
          name: "getPlanets",
          outputs: [
            { internalType: "uint200", name: "confirmedGold", type: "uint200" },
            { internalType: "uint32", name: "goldConfirmedAt", type: "uint32" },
            { internalType: "uint64[]", name: "ids", type: "uint64[]" },
            { internalType: "uint8[]", name: "ranks", type: "uint8[]" },
            { internalType: "uint32[]", name: "times", type: "uint32[]" },
            { internalType: "int16[]", name: "coordinates", type: "int16[]" }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        }
      ],
      this.chain.env.contractAddresses.NormalPlanetController,
      { from: this.chain.callerAddress() }
    ).methods
      .getPlanets(account)
      .call()
  }

  setPlanets = (
    planetId: string | number,
    coordinateQs: Array<string | number>,
    coordinateRs: Array<string | number>,
    txOption?: {}
  ) => {
    return new this.chain.web3.eth.Contract(
      [
        {
          constant: false,
          inputs: [
            { internalType: "uint16", name: "planetId", type: "uint16" },
            { internalType: "int16[]", name: "coordinateQs", type: "int16[]" },
            { internalType: "int16[]", name: "coordinateRs", type: "int16[]" }
          ],
          name: "setPlanets",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ],
      this.chain.env.contractAddresses.NormalPlanetController,
      { from: this.chain.callerAddress() }
    ).methods
      .setPlanets(planetId, coordinateQs, coordinateRs)
      .send(txOption)
  }

  rankupPlanets = (
    userNormalPlanetIds: Array<string | number>,
    targetRanks: Array<string | number>,
    txOption?: {}
  ) => {
    return new this.chain.web3.eth.Contract(
      [
        {
          constant: false,
          inputs: [
            { internalType: "uint64[]", name: "userNormalPlanetIds", type: "uint64[]" },
            { internalType: "uint8[]", name: "targetRanks", type: "uint8[]" }
          ],
          name: "rankupPlanets",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ],
      this.chain.env.contractAddresses.NormalPlanetController,
      { from: this.chain.callerAddress() }
    ).methods
      .rankupPlanets(userNormalPlanetIds, targetRanks)
      .send(txOption)
  }

  removePlanets = (userNormalPlanetIds: Array<string | number>, txOption?: {}) => {
    return new this.chain.web3.eth.Contract(
      [
        {
          constant: false,
          inputs: [{ internalType: "uint64[]", name: "userNormalPlanetIds", type: "uint64[]" }],
          name: "removePlanets",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ],
      this.chain.env.contractAddresses.NormalPlanetController,
      { from: this.chain.callerAddress() }
    ).methods
      .removePlanets(userNormalPlanetIds)
      .send(txOption)
  }

  claimInitialGold = (txOption?: {}) => {
    return new this.chain.web3.eth.Contract(
      [
        {
          constant: false,
          inputs: [],
          name: "claimInitialGold",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ],
      this.chain.env.contractAddresses.NormalPlanetController,
      { from: this.chain.callerAddress() }
    ).methods
      .claimInitialGold()
      .send(txOption)
  }
}
