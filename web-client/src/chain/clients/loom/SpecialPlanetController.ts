// generated by scripts/generateChainClients.js
export class SpecialPlanetController {
  constructor(private chain: import("../../loom").Loom) {}

  getPlanets = (
    account: string
  ): Promise<{
    confirmedGold: string
    goldConfirmedAt: string
    ids: Array<string>
    kinds: Array<string>
    paramRates: Array<string>
    times: Array<string>
    coordinates: Array<string>
    artSeeds: Array<string>
  }> => {
    return new this.chain.web3.eth.Contract(
      [
        {
          constant: true,
          inputs: [{ internalType: "address", name: "account", type: "address" }],
          name: "getPlanets",
          outputs: [
            { internalType: "uint200", name: "confirmedGold", type: "uint200" },
            { internalType: "uint32", name: "goldConfirmedAt", type: "uint32" },
            { internalType: "uint24[]", name: "ids", type: "uint24[]" },
            { internalType: "uint8[]", name: "kinds", type: "uint8[]" },
            { internalType: "uint8[]", name: "paramRates", type: "uint8[]" },
            { internalType: "uint32[]", name: "times", type: "uint32[]" },
            { internalType: "int16[]", name: "coordinates", type: "int16[]" },
            { internalType: "uint64[]", name: "artSeeds", type: "uint64[]" }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        }
      ],
      this.chain.env.contractAddresses.SpecialPlanetController,
      { from: this.chain.callerAddress() }
    ).methods
      .getPlanets(account)
      .call()
  }

  setPlanet = (
    tokenId: string | number,
    coordinateQ: string | number,
    coordinateR: string | number,
    txOption?: {}
  ) => {
    return new this.chain.web3.eth.Contract(
      [
        {
          constant: false,
          inputs: [
            { internalType: "uint256", name: "tokenId", type: "uint256" },
            { internalType: "int16", name: "coordinateQ", type: "int16" },
            { internalType: "int16", name: "coordinateR", type: "int16" }
          ],
          name: "setPlanet",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ],
      this.chain.env.contractAddresses.SpecialPlanetController,
      { from: this.chain.callerAddress() }
    ).methods
      .setPlanet(tokenId, coordinateQ, coordinateR)
      .send(txOption)
  }

  removePlanet = (shortId: string | number, txOption?: {}) => {
    return new this.chain.web3.eth.Contract(
      [
        {
          constant: false,
          inputs: [{ internalType: "uint24", name: "shortId", type: "uint24" }],
          name: "removePlanet",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ],
      this.chain.env.contractAddresses.SpecialPlanetController,
      { from: this.chain.callerAddress() }
    ).methods
      .removePlanet(shortId)
      .send(txOption)
  }

  getPlanetFieldsFromTokenIds = (
    tokenIds: Array<string | number>
  ): Promise<{
    shortIds: Array<string>
    versions: Array<string>
    kinds: Array<string>
    paramRates: Array<string>
    artSeeds: Array<string>
  }> => {
    return new this.chain.web3.eth.Contract(
      [
        {
          constant: true,
          inputs: [{ internalType: "uint256[]", name: "tokenIds", type: "uint256[]" }],
          name: "getPlanetFieldsFromTokenIds",
          outputs: [
            { internalType: "uint24[]", name: "shortIds", type: "uint24[]" },
            { internalType: "uint8[]", name: "versions", type: "uint8[]" },
            { internalType: "uint8[]", name: "kinds", type: "uint8[]" },
            { internalType: "uint8[]", name: "paramRates", type: "uint8[]" },
            { internalType: "uint64[]", name: "artSeeds", type: "uint64[]" }
          ],
          payable: false,
          stateMutability: "pure",
          type: "function"
        }
      ],
      this.chain.env.contractAddresses.SpecialPlanetController,
      { from: this.chain.callerAddress() }
    ).methods
      .getPlanetFieldsFromTokenIds(tokenIds)
      .call()
  }
}
