// generated by scripts/generateChainClients.js
export class SpecialPlanetTokenShop {
  constructor(private chain: import("../../eth").Eth) {}

  price = (): Promise<string> => {
    if (!this.chain.web3 || !this.chain.address) {
      throw new Error("not logined")
    }

    return new this.chain.web3.eth.Contract(
      [
        {
          constant: true,
          inputs: [],
          name: "price",
          outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
          payable: false,
          stateMutability: "view",
          type: "function"
        }
      ],
      this.chain.env.contractAddresses.SpecialPlanetTokenShop,
      { from: this.chain.address }
    ).methods
      .price()
      .call()
  }

  mint = (txOption?: {}) => {
    if (!this.chain.web3 || !this.chain.address) {
      throw new Error("not logined")
    }

    return new this.chain.web3.eth.Contract(
      [
        {
          constant: false,
          inputs: [],
          name: "mint",
          outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
          payable: true,
          stateMutability: "payable",
          type: "function"
        }
      ],
      this.chain.env.contractAddresses.SpecialPlanetTokenShop,
      { from: this.chain.address }
    ).methods
      .mint()
      .send(txOption)
  }
}
